services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: quotes-postgres
    environment:
      POSTGRES_DB: quotes_db
      POSTGRES_USER: quotes_user
      POSTGRES_PASSWORD: quotes_password
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U quotes_user -d quotes_db"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - quotes-network

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: quotes-redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - quotes-network

  # Node.js Application
  app:
    build: .
    container_name: quotes-app
    ports:
      - "3000:3000"
    environment:
      NODE_ENV: ${NODE_ENV:-production}
      DATABASE_URL: postgresql://quotes_user:quotes_password@postgres:5432/quotes_db
      REDIS_URL: redis://redis:6379
      SECRET: ${SECRET:-your-super-secret-jwt-key-change-this-in-production}
      PORT: 3000
      JWT_EXPIRATION: ${JWT_EXPIRATION:-1h}
      EMAIL_THRESHOLD: ${EMAIL_THRESHOLD:-3}
      COOLDOWN_TIME: ${COOLDOWN_TIME:-43200}
      SMTP_URL: ${SMTP_URL:-smtp://localhost:587}
      SMTP_FROM: ${SMTP_FROM:-no-reply@quotesgame.com}
      LOG_LEVEL: ${LOG_LEVEL:-info}
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    volumes:
      - ./prisma:/app/prisma
    networks:
      - quotes-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/healthcheck"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

volumes:
  postgres_data:
  redis_data:

networks:
  quotes-network:
    driver: bridge
